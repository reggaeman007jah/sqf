
URL: https://youtu.be/H1Ap7so5aPY

This demonstrates how to create a Kill / Teleport dialog, as per SKG's excellent video ^^^
This is for my own reference, but made public in case it is of use to others
Please use at your own risk..
Will be typos

___________________________________________________________________________________________

go into arma mission and open GUI editor
rightclick to ad items
remember to always use SAFEZONE with your dialogs

use:
    RSC Frame
    RSC Listbox

place listbox over Frame

add classname to listbox

add button (with class,and text for name of button)

go into mission folder and create two HPP files

make description.ext,to reference hpp files

create files:
    defines.hpp
    controls.hpp

open description.ext, and paste:

    #defines.hpp
    #controls.hpp

go back into GUI editor and press CTRL + P to copy full list of defines

then go into defines.hpp and press CTRL + V to paste 1500 lines of controls

then go back into editor GUI, and press CTRL + SHFT + S to open save dialog, 
save it as dialogTest
 
then go back to controls.hpp and paste in there the content you just saved

for now there should be just a frame listbox and button

next, you need to add a container class for the whole thing, in controls.hpp

so before pasting add this:

----------------------------------------------------

    class dialogTest

        {

        idd = 1234;

        class controls

            {

                PASTE YOUR CONTROLS CONTENT IN HERE

            };


        };

----------------------------------------------------

then create initPlayerLocal.sqf, and create in there an addAction to open the dialog on requets:

----------------------------------------------------

    player addAction ["open ze dialog", {execVM "openDialog.sqf"};];

----------------------------------------------------

now create the file --- openDialog.sqf in your mission folder


in the file:

----------------------------------------------------

    createDialog "dialogTest";
    //i.e.this ^^^ is the parent class for all of the dialog stuff you are about to create

----------------------------------------------------

note the standard button will flash

to resolve, serch for RSC Button in the main controls list 

under the RSCButton class, change the colorBackground from 0,0,0,0.5 to 0,0,0,0.7 

the last value you are changing here is the alpha value, with 0 as fully transparent, 1 as not transparent

to send player names to the local list, use LBADD to add a string to the list 

to do this you need two controls: DISPLAYCTRL and FINDDISPLAY

so, the openDialog.sqf file needs to look like:

----------------------------------------------------

    createDialog "dialogTest";

    _ctrl = (findDisplay 1234 ) displayCTRL 1500;
    // findDisplay needs the IDD
    //so now we have access to our listbox via _ctrl
    // let's test:

----------------------------------------------------

    createDialog "dialogTest";

    _ctrl = (findDisplay 1234 ) displayCTRL 1500;
    lbAdd [1500, "Test"];
    or this works too:
    _ctrl lbAdd "test";

----------------------------------------------------

let's expand this:

    createDialog "dialogTest";
    _ctrl = (findDisplay 1234 ) displayCTRL 1500;
    lbAdd [1500, "Test"];
    {} forEach allPlayers;
    // all players does not include AIs, so instead use allUnits:

----------------------------------------------------

    createDialog "dialogTest";
    _ctrl = (findDisplay 1234 ) displayCTRL 1500;
    lbAdd [1500, "Test"];
    {} forEach allUnits;

----------------------------------------------------

// now let's use magic var x:

    createDialog "dialogTest";

    _ctrl = (findDisplay 1234 ) displayCTRL 1500;
    {
        _name = name _x;
        lbAdd [1500, _name];
    } forEach allUnits;

now the above code will names of all players and units in the game, in the list box

----------------------------------------------------

// next, lets extract names and send them to an array:

    createDialog "dialogTest";
    _ctrl = (findDisplay 1234 ) displayCTRL 1500;
    playerListArray = [];
    {
        playerListArray pushback _x;
        _name = name _x;
        lbAdd [1500, _name];
    } forEach allUnits;

----------------------------------------------------

I believe the new code above will push anything _x to playerListArray, using the same index

index is useful for selection

now create new file: killUnit.sqf, then create an action line of code in control.hpp:

this line goes at the bottom of the code block under the sub-class buttonKill: RSCButton

note, the next line has quotes within qutes, and therefore needs " ' ' " construct:

    action = "execVM 'killUnit.sqf'";

now open killunit.sqf

here we use lbCurSel to grab index of selected item

----------------------------------------------------

    _index = lbCurSel 1500;
    _unit = playerListArray select _index;
    //debug
    hint str _unit;

----------------------------------------------------

all good, now do:

----------------------------------------------------

    _index = lbCurSel 1500;
    _unit = playerListArray select _index;
    _unit setdamage 1;
    // this ^^ will killthe selected unit

----------------------------------------------------

next add a switch command to show colours based on side, using lbSetColor

in opendialog.sqf:

----------------------------------------------------

    createDialog "dialogTest";

    _ctrl = (findDisplay 1234 ) displayCTRL 1500;
    playerListArray = [];

    {
        playerListArray pushback _x;
        _name = name _x;
        _side = side _x;
        switch (_side) do
            {
                case WEST: {lbSetColor [1500, _forEachindex, [0,0,1,1]];}; //blue
                case EAST: {lbSetColor [1500, _forEachindex, [1,0,0,1]];}; //red
            }
        lbAdd [1500, _name];
    } forEach allUnits;

    // note, the above does not work, as we are setting the colour for something that does not yet exist

----------------------------------------------------

so instead, do this:

----------------------------------------------------

    createDialog "dialogTest";

    _ctrl = (findDisplay 1234 ) displayCTRL 1500;

    playerListArray = [];

    {
        playerListArray pushback _x;
        _name = name _x;
        _side = side _x;

        lbAdd [1500, _name];

        switch (_side) do
            {
                case WEST: {lbSetColor [1500, _forEachindex, [0,0,1,1]];}; //blue
                case EAST: {lbSetColor [1500, _forEachindex, [1,0,0,1]];}; //red
            }
    
    } forEach allUnits;

----------------------------------------------------

next ... teleport

return to the gUI edtr again and hit CTRL + I for the config path

in the path write:

    missionConfigFile >> "dialogTest";

this will brig back your GUI as before

copy and paste the kill button, call new buton 'Teleport To', class: Teleport, name the button also

CTRL Shift S to export the new version of the config (save the dialog again using the same title as before)

when pasting back into your config.hpp, make sure you either select and ovrewrite the prvsious config,

or paste the new config and delete the old..

with the new button config, change the path to: "teleportToUnit.sqf"

the teleportToUnit.sqf code is:

----------------------------------------------------

    _index = lbCurSel 1500;
    _unit = playerListArray select _index;
    _pos = getPosATL _unit;

    player setPosATL [_pos select 0, _pos select 1, _pos select 2];

----------------------------------------------------

last thing, fix issue when nothing is selected and Kill is pressed .. you get error

to fix, always have the script select the first item in the list, that way there is always at least one selectable item

the command to use here is 'lbSetCurSelected'

use this 'after' the script has selected all the units in openDialog.sqf

----------------------------------------------------

    createDialog "dialogTest";

    _ctrl = (findDisplay 1234 ) displayCTRL 1500;

    playerListArray = [];

    {
        playerListArray pushback _x;
        _name = name _x;
        _side = side _x;

        lbAdd [1500, _name];

        switch (_side) do
            {
                case WEST: {lbSetColor [1500, _forEachindex, [0,0,1,1]];}; //blue
                case EAST: {lbSetColor [1500, _forEachindex, [1,0,0,1]];}; //red
            }
    
    } forEach allUnits;

    lbSetCurSel [1500, 0];

----------------------------------------------------

All credit goes to Sneaky Kitty Gaming for this above code
Any and all errors ^^^ are mine







